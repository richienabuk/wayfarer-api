{"version":3,"sources":["../../src/database/migrate.js"],"names":["require","Pool","dotenv","config","pool","connectionString","process","env","DATABASE_URL","on","console","log","createUserTable","queryText","query","then","res","end","err","dropUserTable","createBusTable","dropBusTable","createEnumType","createTripTable","dropTripTable","createBookingTable","dropBookingTable","createAllTables","dropAllTables","exit","module","exports"],"mappings":";;eAAiBA,OAAO,CAAC,IAAD,C;IAAhBC,I,YAAAA,I;;AACR,IAAMC,MAAM,GAAGF,OAAO,CAAC,QAAD,CAAtB;;AAEAE,MAAM,CAACC,MAAP;AAEA,IAAMC,IAAI,GAAG,IAAIH,IAAJ,CAAS;AACpBI,EAAAA,gBAAgB,EAAEC,OAAO,CAACC,GAAR,CAAYC;AADV,CAAT,CAAb;AAIAJ,IAAI,CAACK,EAAL,CAAQ,SAAR,EAAmB,YAAM;AACvBC,EAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACD,CAFD;AAIA;;;;AAGA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AAC5B,MAAMC,SAAS,gYAAf;AAYAT,EAAAA,IAAI,CAACU,KAAL,CAAWD,SAAX,EACGE,IADH,CACQ,UAACC,GAAD,EAAS;AACbN,IAAAA,OAAO,CAACC,GAAR,CAAYK,GAAZ;AACAZ,IAAAA,IAAI,CAACa,GAAL;AACD,GAJH,WAKS,UAACC,GAAD,EAAS;AACdR,IAAAA,OAAO,CAACC,GAAR,CAAYO,GAAZ;AACAd,IAAAA,IAAI,CAACa,GAAL;AACD,GARH;AASD,CAtBD;AAwBA;;;;;AAGA,IAAME,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAC1B,MAAMN,SAAS,GAAG,wCAAlB;AACAT,EAAAA,IAAI,CAACU,KAAL,CAAWD,SAAX,EACGE,IADH,CACQ,UAACC,GAAD,EAAS;AACbN,IAAAA,OAAO,CAACC,GAAR,CAAYK,GAAZ;AACAZ,IAAAA,IAAI,CAACa,GAAL;AACD,GAJH,WAKS,UAACC,GAAD,EAAS;AACdR,IAAAA,OAAO,CAACC,GAAR,CAAYO,GAAZ;AACAd,IAAAA,IAAI,CAACa,GAAL;AACD,GARH;AASD,CAXD;AAaA;;;;;AAGA,IAAMG,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAC3B,MAAMP,SAAS,0XAAf;AAYAT,EAAAA,IAAI,CAACU,KAAL,CAAWD,SAAX,EACGE,IADH,CACQ,UAACC,GAAD,EAAS;AACbN,IAAAA,OAAO,CAACC,GAAR,CAAYK,GAAZ;AACAZ,IAAAA,IAAI,CAACa,GAAL;AACD,GAJH,WAKS,UAACC,GAAD,EAAS;AACdR,IAAAA,OAAO,CAACC,GAAR,CAAYO,GAAZ;AACAd,IAAAA,IAAI,CAACa,GAAL;AACD,GARH;AASD,CAtBD;AAwBA;;;;;AAGA,IAAMI,YAAY,GAAG,SAAfA,YAAe,GAAM;AACzB,MAAMR,SAAS,GAAG,wCAAlB;AACAT,EAAAA,IAAI,CAACU,KAAL,CAAWD,SAAX,EACGE,IADH,CACQ,UAACC,GAAD,EAAS;AACbN,IAAAA,OAAO,CAACC,GAAR,CAAYK,GAAZ;AACAZ,IAAAA,IAAI,CAACa,GAAL;AACD,GAJH,WAKS,UAACC,GAAD,EAAS;AACdR,IAAAA,OAAO,CAACC,GAAR,CAAYO,GAAZ;AACAd,IAAAA,IAAI,CAACa,GAAL;AACD,GARH;AASD,CAXD;AAaA;;;;;AAGA,IAAMK,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAC3B,MAAMT,SAAS,iFAAf;AAIAT,EAAAA,IAAI,CAACU,KAAL,CAAWD,SAAX,EACGE,IADH,CACQ,UAACC,GAAD,EAAS;AACbN,IAAAA,OAAO,CAACC,GAAR,CAAYK,GAAZ;AACAZ,IAAAA,IAAI,CAACa,GAAL;AACD,GAJH,WAKS,UAACC,GAAD,EAAS;AACdR,IAAAA,OAAO,CAACC,GAAR,CAAYO,GAAZ;AACAd,IAAAA,IAAI,CAACa,GAAL;AACD,GARH;AASD,CAdD;AAgBA;;;;;AAGA,IAAMM,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AAC5B,MAAMV,SAAS,0dAAf;AAeAT,EAAAA,IAAI,CAACU,KAAL,CAAWD,SAAX,EACGE,IADH,CACQ,UAACC,GAAD,EAAS;AACbN,IAAAA,OAAO,CAACC,GAAR,CAAYK,GAAZ;AACAZ,IAAAA,IAAI,CAACa,GAAL;AACD,GAJH,WAKS,UAACC,GAAD,EAAS;AACdR,IAAAA,OAAO,CAACC,GAAR,CAAYO,GAAZ;AACAd,IAAAA,IAAI,CAACa,GAAL;AACD,GARH;AASD,CAzBD;AA2BA;;;;;AAGA,IAAMO,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAC1B,MAAMX,SAAS,GAAG,wCAAlB;AACAT,EAAAA,IAAI,CAACU,KAAL,CAAWD,SAAX,EACGE,IADH,CACQ,UAACC,GAAD,EAAS;AACbN,IAAAA,OAAO,CAACC,GAAR,CAAYK,GAAZ;AACAZ,IAAAA,IAAI,CAACa,GAAL;AACD,GAJH,WAKS,UAACC,GAAD,EAAS;AACdR,IAAAA,OAAO,CAACC,GAAR,CAAYO,GAAZ;AACAd,IAAAA,IAAI,CAACa,GAAL;AACD,GARH;AASD,CAXD;AAaA;;;;;AAGA,IAAMQ,kBAAkB,GAAG,SAArBA,kBAAqB,GAAM;AAC/B,MAAMZ,SAAS,6eAAf;AAeAT,EAAAA,IAAI,CAACU,KAAL,CAAWD,SAAX,EACGE,IADH,CACQ,UAACC,GAAD,EAAS;AACbN,IAAAA,OAAO,CAACC,GAAR,CAAYK,GAAZ;AACAZ,IAAAA,IAAI,CAACa,GAAL;AACD,GAJH,WAKS,UAACC,GAAD,EAAS;AACdR,IAAAA,OAAO,CAACC,GAAR,CAAYO,GAAZ;AACAd,IAAAA,IAAI,CAACa,GAAL;AACD,GARH;AASD,CAzBD;AA2BA;;;;;AAGA,IAAMS,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAM;AAC7B,MAAMb,SAAS,GAAG,2CAAlB;AACAT,EAAAA,IAAI,CAACU,KAAL,CAAWD,SAAX,EACGE,IADH,CACQ,UAACC,GAAD,EAAS;AACbN,IAAAA,OAAO,CAACC,GAAR,CAAYK,GAAZ;AACAZ,IAAAA,IAAI,CAACa,GAAL;AACD,GAJH,WAKS,UAACC,GAAD,EAAS;AACdR,IAAAA,OAAO,CAACC,GAAR,CAAYO,GAAZ;AACAd,IAAAA,IAAI,CAACa,GAAL;AACD,GARH;AASD,CAXD;AAaA;;;;;AAGA,IAAMU,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AAC5Bf,EAAAA,eAAe;AACfQ,EAAAA,cAAc;AACdE,EAAAA,cAAc;AACdC,EAAAA,eAAe;AACfE,EAAAA,kBAAkB;AACnB,CAND;AAOA;;;;;AAGA,IAAMG,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAC1BF,EAAAA,gBAAgB;AAChBF,EAAAA,aAAa;AACbH,EAAAA,YAAY;AACZF,EAAAA,aAAa;AACd,CALD;;AAOAf,IAAI,CAACK,EAAL,CAAQ,QAAR,EAAkB,YAAM;AACtBC,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACAL,EAAAA,OAAO,CAACuB,IAAR,CAAa,CAAb;AACD,CAHD;AAKAC,MAAM,CAACC,OAAP,GAAiB;AACfnB,EAAAA,eAAe,EAAfA,eADe;AAEfQ,EAAAA,cAAc,EAAdA,cAFe;AAGfG,EAAAA,eAAe,EAAfA,eAHe;AAIfE,EAAAA,kBAAkB,EAAlBA,kBAJe;AAKfE,EAAAA,eAAe,EAAfA,eALe;AAMfD,EAAAA,gBAAgB,EAAhBA,gBANe;AAOfF,EAAAA,aAAa,EAAbA,aAPe;AAQfH,EAAAA,YAAY,EAAZA,YARe;AASfF,EAAAA,aAAa,EAAbA,aATe;AAUfS,EAAAA,aAAa,EAAbA;AAVe,CAAjB,C,CAaA;;AACA5B,OAAO,CAAC,eAAD,CAAP","sourcesContent":["const { Pool } = require('pg');\nconst dotenv = require('dotenv');\n\ndotenv.config();\n\nconst pool = new Pool({\n  connectionString: process.env.DATABASE_URL,\n});\n\npool.on('connect', () => {\n  console.log('connected to psql db');\n});\n\n/**\n * Create users table\n */\nconst createUserTable = () => {\n  const queryText = `CREATE TABLE IF NOT EXISTS\n      users(\n        id SERIAL NOT NULL PRIMARY KEY,\n        email VARCHAR(128) UNIQUE NOT NULL,\n        first_name VARCHAR(80) NOT NULL,\n        last_name VARCHAR(80) NOT NULL,\n        password VARCHAR(128) NOT NULL,\n        is_admin BOOLEAN DEFAULT FALSE,\n        created_at TIMESTAMP NOT NULL,\n        updated_at TIMESTAMP NOT NULL\n      )`;\n\n  pool.query(queryText)\n    .then((res) => {\n      console.log(res);\n      pool.end();\n    })\n    .catch((err) => {\n      console.log(err);\n      pool.end();\n    });\n};\n\n/**\n * Drop users table\n */\nconst dropUserTable = () => {\n  const queryText = 'DROP TABLE IF EXISTS users returning *';\n  pool.query(queryText)\n    .then((res) => {\n      console.log(res);\n      pool.end();\n    })\n    .catch((err) => {\n      console.log(err);\n      pool.end();\n    });\n};\n\n/**\n * Create buses table\n */\nconst createBusTable = () => {\n  const queryText = `CREATE TABLE IF NOT EXISTS\n      buses(\n        id SERIAL NOT NULL PRIMARY KEY,\n        number_plate VARCHAR(128) UNIQUE NOT NULL,\n        manufacturer VARCHAR(128) NOT NULL,\n        model VARCHAR(128) NOT NULL,\n        year VARCHAR(128) NOT NULL,\n        capacity INT NOT NULL,\n        created_at TIMESTAMP NOT NULL,\n        updated_at TIMESTAMP NOT NULL\n      )`;\n\n  pool.query(queryText)\n    .then((res) => {\n      console.log(res);\n      pool.end();\n    })\n    .catch((err) => {\n      console.log(err);\n      pool.end();\n    });\n};\n\n/**\n * Drop buses table\n */\nconst dropBusTable = () => {\n  const queryText = 'DROP TABLE IF EXISTS buses returning *';\n  pool.query(queryText)\n    .then((res) => {\n      console.log(res);\n      pool.end();\n    })\n    .catch((err) => {\n      console.log(err);\n      pool.end();\n    });\n};\n\n/**\n * Create enum type\n */\nconst createEnumType = () => {\n  const queryText = `\n  CREATE TYPE trip_status AS ENUM ('active', 'suspended', 'cancelled')\n  `;\n\n  pool.query(queryText)\n    .then((res) => {\n      console.log(res);\n      pool.end();\n    })\n    .catch((err) => {\n      console.log(err);\n      pool.end();\n    });\n};\n\n/**\n * Create trips table\n */\nconst createTripTable = () => {\n  const queryText = `\n    CREATE TABLE IF NOT EXISTS\n      trips(\n        id SERIAL NOT NULL PRIMARY KEY,\n        bus_id INT NOT NULL,\n        origin VARCHAR(128) NOT NULL,\n        destination VARCHAR(128) NOT NULL,\n        trip_date DATE NOT NULL,\n        status trip_status DEFAULT 'active',\n        fare FLOAT NOT NULL,\n        created_at TIMESTAMP NOT NULL,\n        updated_at TIMESTAMP NOT NULL,\n        FOREIGN KEY (bus_id) REFERENCES buses (id) ON DELETE CASCADE\n      )`;\n\n  pool.query(queryText)\n    .then((res) => {\n      console.log(res);\n      pool.end();\n    })\n    .catch((err) => {\n      console.log(err);\n      pool.end();\n    });\n};\n\n/**\n * Drop trips table\n */\nconst dropTripTable = () => {\n  const queryText = 'DROP TABLE IF EXISTS trips returning *';\n  pool.query(queryText)\n    .then((res) => {\n      console.log(res);\n      pool.end();\n    })\n    .catch((err) => {\n      console.log(err);\n      pool.end();\n    });\n};\n\n/**\n * Create bookings table\n */\nconst createBookingTable = () => {\n  const queryText = `\n    CREATE TABLE IF NOT EXISTS\n      bookings(\n        id SERIAL NOT NULL,\n        trip_id INT NOT NULL,\n        user_id INT NOT NULL,\n        seat_number INT NOT NULL,\n        created_at TIMESTAMP NOT NULL,\n        updated_at TIMESTAMP NOT NULL,\n        PRIMARY KEY (trip_id, user_id),\n        UNIQUE (trip_id, seat_number),\n        FOREIGN KEY (trip_id) REFERENCES trips (id) ON DELETE CASCADE,\n        FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE\n      )`;\n\n  pool.query(queryText)\n    .then((res) => {\n      console.log(res);\n      pool.end();\n    })\n    .catch((err) => {\n      console.log(err);\n      pool.end();\n    });\n};\n\n/**\n * Drop bookings table\n */\nconst dropBookingTable = () => {\n  const queryText = 'DROP TABLE IF EXISTS bookings returning *';\n  pool.query(queryText)\n    .then((res) => {\n      console.log(res);\n      pool.end();\n    })\n    .catch((err) => {\n      console.log(err);\n      pool.end();\n    });\n};\n\n/**\n * Create All Tables\n */\nconst createAllTables = () => {\n  createUserTable();\n  createBusTable();\n  createEnumType();\n  createTripTable();\n  createBookingTable();\n};\n/**\n * Drop All Tables\n */\nconst dropAllTables = () => {\n  dropBookingTable();\n  dropTripTable();\n  dropBusTable();\n  dropUserTable();\n};\n\npool.on('remove', () => {\n  console.log('client removed');\n  process.exit(0);\n});\n\nmodule.exports = {\n  createUserTable,\n  createBusTable,\n  createTripTable,\n  createBookingTable,\n  createAllTables,\n  dropBookingTable,\n  dropTripTable,\n  dropBusTable,\n  dropUserTable,\n  dropAllTables,\n};\n\n// eslint-disable-next-line import/no-extraneous-dependencies\nrequire('make-runnable');\n"],"file":"migrate.js"}