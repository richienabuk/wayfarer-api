{"version":3,"sources":["../../src/middleware/auth.js"],"names":["req","res","next","token","header","status","send","error","decoded","jwt","verify","process","env","JWT_SECRET","text","db","query","userId","rows","user","id","firstName","first_name","lastName","last_name","email","isAdmin"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AAEA;;;;;;+BACe,iBAAOA,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB;AAAA;;AAAA;AAAA;AAAA;AAAA;AACb;;;;AAIMC,YAAAA,KALO,GAKCH,GAAG,CAACI,MAAJ,CAAW,gBAAX,CALD;;AAAA,gBAMRD,KANQ;AAAA;AAAA;AAAA;;AAAA,6CAMMF,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAED,cAAAA,MAAM,EAAE,OAAV;AAAmBE,cAAAA,KAAK,EAAE;AAA1B,aAArB,CANN;;AAAA;AAAA;AAaLC,YAAAA,OAbK,GAaKC,yBAAIC,MAAJ,CAAWP,KAAX,EAAkBQ,OAAO,CAACC,GAAR,CAAYC,UAA9B,CAbL;AAeLC,YAAAA,IAfK,GAeE,mCAfF;AAAA;AAAA,mBAgBYC,qBAAGC,KAAH,CAASF,IAAT,EAAe,CAACN,OAAO,CAACS,MAAT,CAAf,CAhBZ;;AAAA;AAAA;AAgBHC,YAAAA,IAhBG,SAgBHA,IAhBG;;AAAA,gBAiBNA,IAAI,CAAC,CAAD,CAjBE;AAAA;AAAA;AAAA;;AAAA,6CAkBFjB,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAED,cAAAA,MAAM,EAAE,OAAV;AAAmBE,cAAAA,KAAK,EAAE;AAA1B,aAArB,CAlBE;;AAAA;AAoBXP,YAAAA,GAAG,CAACmB,IAAJ,GAAW;AACTC,cAAAA,EAAE,EAAEZ,OAAO,CAACS,MADH;AAETI,cAAAA,SAAS,EAAEH,IAAI,CAAC,CAAD,CAAJ,CAAQI,UAFV;AAGTC,cAAAA,QAAQ,EAAEL,IAAI,CAAC,CAAD,CAAJ,CAAQM,SAHT;AAITC,cAAAA,KAAK,EAAEP,IAAI,CAAC,CAAD,CAAJ,CAAQO,KAJN;AAKTC,cAAAA,OAAO,EAAElB,OAAO,CAACkB;AALR,aAAX,CApBW,CA2BX;;AACAxB,YAAAA,IAAI;AA5BO;AAAA;;AAAA;AAAA;AAAA;AA8BXD,YAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAED,cAAAA,MAAM,EAAE,OAAV;AAAmBE,cAAAA,KAAK;AAAxB,aAArB;;AA9BW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import jwt from 'jsonwebtoken';\nimport db from '../database';\n\n// eslint-disable-next-line consistent-return\nexport default async (req, res, next) => {\n  /**\n   * Check if token available\n   * Returns 401\n   */\n  const token = req.header('x-access-token');\n  if (!token) return res.status(401).send({ status: 'error', error: 'Access denied. No token provided.' });\n\n  /**\n   * Verify header token by comparing with JWT_SECRET\n   * Return user decoded details if true || 401\n   */\n  try {\n    const decoded = jwt.verify(token, process.env.JWT_SECRET);\n\n    const text = 'SELECT * FROM users WHERE id = $1';\n    const { rows } = await db.query(text, [decoded.userId]);\n    if (!rows[0]) {\n      return res.status(400).send({ status: 'error', error: 'The token you provided is invalid' });\n    }\n    req.user = {\n      id: decoded.userId,\n      firstName: rows[0].first_name,\n      lastName: rows[0].last_name,\n      email: rows[0].email,\n      isAdmin: decoded.isAdmin,\n    };\n    // req.user = decoded;\n    next();\n  } catch (e) {\n    res.status(400).send({ status: 'error', error: e });\n  }\n};\n"],"file":"auth.js"}