{"version":3,"sources":["../../src/controllers/User.js"],"names":["User","register","req","res","body","email","password","first_name","last_name","status","send","error","Auth","isValidEmail","hashPassword","createUserQuery","user","is_admin","Date","db","query","rows","jwtToken","generateToken","id","data","user_id","token","routine","login","text","comparePassword","index","message"],"mappings":"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","sourcesContent":["import moment from 'moment';\nimport db from '../database';\nimport Auth from './utils/AuthHelper';\n\nconst User = {\n  async register(req, res) {\n    if (!req.body.email || !req.body.password || !req.body.first_name || !req.body.last_name) {\n      return res.status(401).send({\n        status: 'error',\n        error: 'Some values are missing',\n      });\n    }\n\n    if (!Auth.isValidEmail(req.body.email)) {\n      return res.status(401).send({\n        status: 'error',\n        error: 'Please enter a valid email address',\n      });\n    }\n\n    const hashPassword = Auth.hashPassword(req.body.password);\n\n    const createUserQuery = `INSERT INTO \n      users(email, first_name, last_name, password, is_admin, created_at, updated_at)\n      VALUES($1,$2,$3,$4,$5,$6,$7)\n      returning *`;\n\n    const user = [\n      req.body.email,\n      req.body.first_name,\n      req.body.last_name,\n      hashPassword,\n      req.body.is_admin ? req.body.is_admin : false,\n      moment(new Date()),\n      moment(new Date()),\n    ];\n\n    try {\n      const { rows } = await db.query(createUserQuery, user);\n      const jwtToken = Auth.generateToken(rows[0].id, rows[0].is_admin);\n\n      const data = {};\n      data.user_id = rows[0].id;\n      data.is_admin = rows[0].is_admin;\n      data.token = jwtToken;\n      return res.status(201).send({\n        status: 'success',\n        data,\n      });\n    } catch (e) {\n      if (e.routine === '_bt_check_unique') {\n        return res.status(422).send({\n          status: 'error',\n          error: 'User with that EMAIL already exist',\n        });\n      }\n      return res.status(400).send({\n        status: 'error',\n        error: e,\n      });\n    }\n  },\n\n  async login(req, res) {\n    if (!req.body.email || !req.body.password) {\n      return res.status(400).send({\n        status: 'error',\n        error: 'Some values are missing',\n      });\n    }\n    if (!Auth.isValidEmail(req.body.email)) {\n      return res.status(401).send({\n        status: 'error',\n        error: 'Please enter a valid email address',\n      });\n    }\n    const text = 'SELECT * FROM users WHERE email = $1';\n    try {\n      const { rows } = await db.query(text, [req.body.email]);\n      if (!rows[0]) {\n        return res.status(401).send({\n          status: 'error',\n          error: 'The credentials you provided is incorrect',\n        });\n      }\n      if (!Auth.comparePassword(rows[0].password, req.body.password)) {\n        return res.status(401).send({\n          status: 'error',\n          error: 'The credentials you provided is incorrect',\n        });\n      }\n      const jwtToken = Auth.generateToken(rows[0].id, rows[0].is_admin);\n\n      const data = {};\n      data.user_id = rows[0].id;\n      data.is_admin = rows[0].is_admin;\n      data.token = jwtToken;\n      return res.status(200).send({\n        status: 'success',\n        data,\n      });\n    } catch (e) {\n      return res.status(400).send({\n        status: 'error',\n        error: `An error occured ${e}`,\n      });\n    }\n  },\n\n  async index(req, res) {\n    res.status(200).send({\n      status: 'success',\n      message: 'Welcome to WayFarer API',\n    });\n  },\n};\n\nexport default User;\n"],"file":"User.js"}