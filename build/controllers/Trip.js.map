{"version":3,"sources":["../../src/controllers/Trip.js"],"names":["Trip","create","req","res","body","bus_id","origin","destination","trip_date","status","fare","send","error","checkBus","db","query","busInfo","rows","exists","createTripQuery","trip","Date","data","trip_id","id","index","getAllQuery","rowCount","update","findOneQuery","updateOneQuery","params","values","response"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AAEA,IAAMA,IAAI,GAAG;AACLC,EAAAA,MADK;AAAA;AAAA;AAAA,kDACEC,GADF,EACOC,GADP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEL,CAACD,GAAG,CAACE,IAAJ,CAASC,MAAV,IACC,CAACH,GAAG,CAACE,IAAJ,CAASE,MADX,IAEC,CAACJ,GAAG,CAACE,IAAJ,CAASG,WAFX,IAGC,CAACL,GAAG,CAACE,IAAJ,CAASI,SAHX,IAIC,CAACN,GAAG,CAACE,IAAJ,CAASK,MAJX,IAKC,CAACP,GAAG,CAACE,IAAJ,CAASM,IAPN;AAAA;AAAA;AAAA;;AAAA,+CAQAP,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBE,IAAhB,CAAqB;AAC1BF,gBAAAA,MAAM,EAAE,OADkB;AAE1BG,gBAAAA,KAAK,EAAE;AAFmB,eAArB,CARA;;AAAA;AAcHC,cAAAA,QAdG,GAcQ,wDAdR;AAAA;AAAA,qBAeaC,qBAAGC,KAAH,CAASF,QAAT,EAAmB,CAACX,GAAG,CAACE,IAAJ,CAASC,MAAV,CAAnB,CAfb;;AAAA;AAeHW,cAAAA,OAfG;;AAAA,kBAgBJA,OAAO,CAACC,IAAR,CAAa,CAAb,EAAgBC,MAhBZ;AAAA;AAAA;AAAA;;AAAA,+CAgB2Bf,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBE,IAAhB,CAAqB;AAAEF,gBAAAA,MAAM,EAAE,OAAV;AAAmBG,gBAAAA,KAAK,EAAE;AAA1B,eAArB,CAhB3B;;AAAA;AAkBHO,cAAAA,eAlBG;AAuBHC,cAAAA,IAvBG,GAuBI,CACXlB,GAAG,CAACE,IAAJ,CAASC,MADE,EAEXH,GAAG,CAACE,IAAJ,CAASE,MAFE,EAGXJ,GAAG,CAACE,IAAJ,CAASG,WAHE,EAIXL,GAAG,CAACE,IAAJ,CAASI,SAJE,EAKXN,GAAG,CAACE,IAAJ,CAASK,MALE,EAMXP,GAAG,CAACE,IAAJ,CAASM,IANE,EAOX,wBAAO,IAAIW,IAAJ,EAAP,CAPW,EAQX,wBAAO,IAAIA,IAAJ,EAAP,CARW,CAvBJ;AAAA;AAAA;AAAA,qBAkCgBP,qBAAGC,KAAH,CAASI,eAAT,EAA0BC,IAA1B,CAlChB;;AAAA;AAAA;AAkCCH,cAAAA,IAlCD,QAkCCA,IAlCD;AAmCDK,cAAAA,IAnCC,GAmCM,EAnCN;AAoCPA,cAAAA,IAAI,CAACC,OAAL,GAAeN,IAAI,CAAC,CAAD,CAAJ,CAAQO,EAAvB;AApCO,+CAqCArB,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBE,IAAhB,CAAqB;AAC1BF,gBAAAA,MAAM,EAAE,SADkB;AAE1Ba,gBAAAA,IAAI,EAAJA;AAF0B,eAArB,CArCA;;AAAA;AAAA;AAAA;AAAA,+CA0CAnB,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBE,IAAhB,CAAqB;AAC1BF,gBAAAA,MAAM,EAAE,OADkB;AAE1BG,gBAAAA,KAAK;AAFqB,eAArB,CA1CA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAiDLa,EAAAA,KAjDK;AAAA;AAAA;AAAA,mDAiDCvB,GAjDD,EAiDMC,GAjDN;AAAA;;AAAA;AAAA;AAAA;AAAA;AAkDHuB,cAAAA,WAlDG,GAkDW,qCAlDX;AAAA;AAAA;AAAA,qBAoD0BZ,qBAAGC,KAAH,CAASW,WAAT,EAAsB,CAAC,QAAD,CAAtB,CApD1B;;AAAA;AAAA;AAoDCT,cAAAA,IApDD,SAoDCA,IApDD;AAoDOU,cAAAA,QApDP,SAoDOA,QApDP;AAqDDL,cAAAA,IArDC,GAqDML,IArDN,EAsDP;AACA;;AAvDO,gDAwDAd,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBE,IAAhB,CAAqB;AAC1BF,gBAAAA,MAAM,EAAE,SADkB;AAE1Ba,gBAAAA,IAAI,EAAJA,IAF0B;AAG1B;AACAK,gBAAAA,QAAQ,EAARA;AAJ0B,eAArB,CAxDA;;AAAA;AAAA;AAAA;AAAA,gDA+DAxB,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBE,IAAhB,CAAqB;AAC1BF,gBAAAA,MAAM,EAAE,OADkB;AAE1BG,gBAAAA,KAAK;AAFqB,eAArB,CA/DA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAsELgB,EAAAA,MAtEK;AAAA;AAAA;AAAA,mDAsEE1B,GAtEF,EAsEOC,GAtEP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAuEH0B,cAAAA,YAvEG,GAuEY,iCAvEZ;AAwEHC,cAAAA,cAxEG;AAAA;AAAA;AAAA,qBA2EgBhB,qBAAGC,KAAH,CAASc,YAAT,EAAuB,CAAC3B,GAAG,CAAC6B,MAAJ,CAAWP,EAAZ,CAAvB,CA3EhB;;AAAA;AAAA;AA2ECP,cAAAA,IA3ED,SA2ECA,IA3ED;;AAAA,kBA4EFA,IAAI,CAAC,CAAD,CA5EF;AAAA;AAAA;AAAA;;AAAA,gDA6EEd,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBE,IAAhB,CAAqB;AAC1BF,gBAAAA,MAAM,EAAE,OADkB;AAE1BG,gBAAAA,KAAK,EAAE;AAFmB,eAArB,CA7EF;;AAAA;AAkFDoB,cAAAA,MAlFC,GAkFQ,CACb9B,GAAG,CAACE,IAAJ,CAASK,MAAT,IAAmBQ,IAAI,CAAC,CAAD,CAAJ,CAAQR,MADd,EAEb,wBAAO,IAAIY,IAAJ,EAAP,CAFa,EAGbnB,GAAG,CAAC6B,MAAJ,CAAWP,EAHE,CAlFR;AAAA;AAAA,qBAuFgBV,qBAAGC,KAAH,CAASe,cAAT,EAAyBE,MAAzB,CAvFhB;;AAAA;AAuFDC,cAAAA,QAvFC;AAAA,gDAwFA9B,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBE,IAAhB,CAAqBsB,QAAQ,CAAChB,IAAT,CAAc,CAAd,CAArB,CAxFA;;AAAA;AAAA;AAAA;AAAA,gDA0FAd,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBE,IAAhB,cA1FA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,CAAb;eA+FeX,I","sourcesContent":["import moment from 'moment';\nimport db from '../database';\n\nconst Trip = {\n  async create(req, res) {\n    if (!req.body.bus_id\n      || !req.body.origin\n      || !req.body.destination\n      || !req.body.trip_date\n      || !req.body.status\n      || !req.body.fare) {\n      return res.status(400).send({\n        status: 'error',\n        error: 'Some values are missing',\n      });\n    }\n\n    const checkBus = 'SELECT exists(SELECT 1 FROM buses WHERE id=$1 LIMIT 1)';\n    const busInfo = await db.query(checkBus, [req.body.bus_id]);\n    if (!busInfo.rows[0].exists) return res.status(404).send({ status: 'error', error: 'bus does not exist' });\n\n    const createTripQuery = `INSERT INTO \n      trips(bus_id, origin, destination, trip_date, status, fare, created_at, updated_at)\n      VALUES($1,$2,$3,$4,$5,$6,$7,$8)\n      returning *`;\n\n    const trip = [\n      req.body.bus_id,\n      req.body.origin,\n      req.body.destination,\n      req.body.trip_date,\n      req.body.status,\n      req.body.fare,\n      moment(new Date()),\n      moment(new Date()),\n    ];\n    try {\n      const { rows } = await db.query(createTripQuery, trip);\n      const data = {};\n      data.trip_id = rows[0].id;\n      return res.status(201).send({\n        status: 'success',\n        data,\n      });\n    } catch (e) {\n      return res.status(400).send({\n        status: 'error',\n        error: e,\n      });\n    }\n  },\n\n  async index(req, res) {\n    const getAllQuery = 'SELECT * FROM trips WHERE status=$1';\n    try {\n      const { rows, rowCount } = await db.query(getAllQuery, ['active']);\n      const data = rows;\n      // data.trip_id = rows.id;\n      // data.capacity = rows.capacity;\n      return res.status(200).send({\n        status: 'success',\n        data,\n        // rows,\n        rowCount,\n      });\n    } catch (e) {\n      return res.status(400).send({\n        status: 'error',\n        error: e,\n      });\n    }\n  },\n\n  async update(req, res) {\n    const findOneQuery = 'SELECT * FROM trips WHERE id=$1';\n    const updateOneQuery = `UPDATE trips\n      SET status=$1 updated_at=$2, WHERE id=$3 returning *`;\n    try {\n      const { rows } = await db.query(findOneQuery, [req.params.id]);\n      if (!rows[0]) {\n        return res.status(404).send({\n          status: 'error',\n          error: 'trip not found',\n        });\n      }\n      const values = [\n        req.body.status || rows[0].status,\n        moment(new Date()),\n        req.params.id,\n      ];\n      const response = await db.query(updateOneQuery, values);\n      return res.status(200).send(response.rows[0]);\n    } catch (e) {\n      return res.status(400).send(e);\n    }\n  },\n};\n\nexport default Trip;\n"],"file":"Trip.js"}