{"version":3,"sources":["../../src/controllers/Bus.js"],"names":["Bus","create","req","res","body","number_plate","manufacturer","model","year","capacity","status","send","error","createBusQuery","bus","Date","db","query","rows","data","bus_id","id","routine","index","getAllQuery","rowCount"],"mappings":"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","sourcesContent":["import moment from 'moment';\nimport db from '../database';\n\nconst Bus = {\n  async create(req, res) {\n    if (!req.body.number_plate\n      || !req.body.manufacturer\n      || !req.body.model\n      || !req.body.year\n      || !req.body.capacity) {\n      return res.status(400).send({\n        status: 'error',\n        error: 'Some values are missing',\n      });\n    }\n\n    const createBusQuery = `INSERT INTO \n      buses(number_plate, manufacturer, model, year, capacity, created_at, updated_at)\n      VALUES($1,$2,$3,$4,$5,$6,$7)\n      returning *`;\n\n    const bus = [\n      req.body.number_plate,\n      req.body.manufacturer,\n      req.body.model,\n      req.body.year,\n      req.body.capacity,\n      moment(new Date()),\n      moment(new Date()),\n    ];\n    try {\n      const { rows } = await db.query(createBusQuery, bus);\n      const data = {};\n      data.bus_id = rows[0].id;\n      return res.status(201).send({\n        status: 'success',\n        data,\n      });\n    } catch (e) {\n      if (e.routine === '_bt_check_unique') {\n        return res.status(422).send({\n          status: 'error',\n          error: 'The bus with the plate number is already registered',\n        });\n      }\n      return res.status(400).send({\n        status: 'error',\n        error: e,\n      });\n    }\n  },\n\n  async index(req, res) {\n    const getAllQuery = 'SELECT * FROM buses';\n    try {\n      const { rows, rowCount } = await db.query(getAllQuery);\n      const data = rows;\n      // data.bus_id = rows.id;\n      // data.capacity = rows.capacity;\n      return res.status(200).send({\n        status: 'success',\n        data,\n        rowCount,\n      });\n    } catch (e) {\n      return res.status(400).send({\n        status: 'error',\n        error: e,\n      });\n    }\n  },\n};\n\nexport default Bus;\n"],"file":"Bus.js"}