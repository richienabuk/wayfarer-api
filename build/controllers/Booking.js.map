{"version":3,"sources":["../../src/controllers/Booking.js"],"names":["Booking","create","req","res","body","trip_id","status","send","error","checkTrip","currentBooking","db","query","rows","tripInfo","bookingRows","bookedSeats","map","seat","seat_number","remainingSeat","Seat","getAvailableSeat","capacity","length","seatNumber","generateSeatNumber","includes","Number","createBookingQuery","booking","user","id","Date","bookedResult","booked","data","booking_id","user_id","bus_id","trip_date","first_name","firstName","last_name","lastName","email","constraint","index","getUserBookings","getBookings","isAdmin","show","text","params","update","findOneQuery","findBooking","thisbooking","updateOneQuery","values","response","deleteQuery"],"mappings":"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","sourcesContent":["import moment from 'moment';\nimport db from '../database';\nimport Seat from './utils/BookingHelper';\n\nconst Booking = {\n  async create(req, res) {\n    if (!req.body.trip_id) {\n      return res.status(400).send({\n        status: 'error',\n        error: 'No trip selected',\n      });\n    }\n\n    const checkTrip = 'SELECT * FROM trips JOIN buses on trips.bus_id = buses.id WHERE trips.id=$1';\n    const currentBooking = 'SELECT seat_number FROM bookings where trip_id=$1';\n\n    try {\n      const { rows } = await db.query(checkTrip, [req.body.trip_id]);\n\n      if (!rows[0]) return res.status(404).send({ status: 'error', error: 'trip does not exist' });\n      if (rows[0].status !== 'active') return res.status(404).send({ status: 'error', error: 'the trip you intend to book has either been suspended or cancelled. Pls try another.' });\n      const tripInfo = rows[0];\n\n      const bookingRows = await db.query(currentBooking, [req.body.trip_id]);\n\n      const bookedSeats = bookingRows.rows.map(seat => seat.seat_number);\n      const remainingSeat = Seat.getAvailableSeat(bookedSeats, tripInfo.capacity);\n\n      if (!remainingSeat.length) return res.status(404).send({ status: 'error', error: 'the trip you intend to book is filled up, try another' });\n\n      let seatNumber;\n\n      if (!req.body.seat_number) {\n        seatNumber = Seat.generateSeatNumber(remainingSeat);\n      } else if (!remainingSeat.includes(Number(req.body.seat_number))) {\n        res.status(400).send({ status: 'error', error: 'Seat is already taken' });\n      } else {\n        seatNumber = req.body.seat_number;\n      }\n\n      const createBookingQuery = `INSERT INTO \n      bookings(trip_id, user_id, seat_number, created_at, updated_at) \n      VALUES($1,$2,$3,$4,$5) \n      returning *`;\n\n      const booking = [\n        req.body.trip_id,\n        req.user.id,\n        seatNumber,\n        moment(new Date()),\n        moment(new Date()),\n      ];\n      try {\n        const bookedResult = await db.query(createBookingQuery, booking);\n        const booked = bookedResult.rows[0];\n        const data = {};\n        data.booking_id = booked.id;\n        data.user_id = booked.user_id;\n        data.trip_id = booked.trip_id;\n        data.bus_id = tripInfo.bus_id;\n        data.trip_date = tripInfo.trip_date;\n        data.seat_number = booked.seat_number;\n        data.first_name = req.user.firstName;\n        data.last_name = req.user.lastName;\n        data.email = req.user.email;\n        return res.status(201).send({\n          status: 'success',\n          data,\n        });\n      } catch (e) {\n        if (e.constraint === 'bookings_trip_id_seat_number_key') {\n          return res.status(422).send({\n            status: 'error',\n            error: 'Seat has already been taken, choose another one',\n          });\n        }\n        if (e.constraint === 'bookings_pkey') {\n          return res.status(422).send({\n            status: 'error',\n            error: 'You already have a booking for this trip',\n          });\n        }\n        return res.status(400).send({\n          status: 'error',\n          error: e,\n        });\n      }\n    } catch (e) {\n      return e;\n    }\n  },\n\n  async index(req, res) {\n    const getUserBookings = 'SELECT * FROM bookings where user_id = $1';\n    const getBookings = 'SELECT * FROM bookings';\n    let data;\n    try {\n      if (req.user.isAdmin) {\n        const { rows } = await db.query(getBookings);\n        data = rows;\n      } else {\n        const { rows } = await db.query(getUserBookings, [req.user.id]);\n        data = rows;\n      }\n\n      return res.status(200).send({\n        status: 'success',\n        data,\n      });\n    } catch (e) {\n      return res.status(400).send({\n        status: 'error',\n        error: e,\n      });\n    }\n  },\n\n  async show(req, res) {\n    const text = 'SELECT * FROM bookings WHERE id = $1 AND user_id = $2';\n    try {\n      const { rows } = await db.query(text, [req.params.id, req.user.id]);\n      if (!rows[0]) {\n        return res.status(404).send({\n          status: 'error',\n          error: 'booking not found',\n        });\n      }\n      return res.status(200).send(rows[0]);\n    } catch (e) {\n      return res.status(400).send({\n        status: 'error',\n        error: e,\n      });\n    }\n  },\n\n  async update(req, res) {\n    const findOneQuery = 'SELECT * FROM bookings WHERE id=$1 AND user_id = $2';\n    try {\n      const findBooking = await db.query(findOneQuery, [req.params.id, req.user.id]);\n      const thisbooking = findBooking.rows[0];\n      if (!thisbooking) {\n        return res.status(404).send({\n          status: 'error',\n          error: 'booking not found',\n        });\n      }\n\n      const checkTrip = 'SELECT * FROM trips JOIN buses on trips.bus_id = buses.id WHERE trips.id=$1';\n      const currentBooking = 'SELECT seat_number FROM bookings where trip_id=$1';\n\n      const { rows } = await db.query(checkTrip, [thisbooking.trip_id]);\n\n      if (rows[0].status !== 'active') return res.status(404).send({ status: 'error', error: 'You are not allowed to change seat for a suspended or cancelled trip' });\n      const tripInfo = rows[0];\n\n      const bookingRows = await db.query(currentBooking, [thisbooking.trip_id]);\n\n      const bookedSeats = bookingRows.rows.map(seat => seat.seat_number);\n      const remainingSeat = Seat.getAvailableSeat(bookedSeats, tripInfo.capacity);\n\n      if (!remainingSeat.length) return res.status(404).send({ status: 'error', error: 'sorry, there is no available seat to change to' });\n\n      let seatNumber;\n\n      if (!remainingSeat.includes(Number(req.body.seat_number))) {\n        res.status(400).send({ status: 'error', error: 'Seat is already taken' });\n      } else {\n        seatNumber = req.body.seat_number;\n      }\n\n      const updateOneQuery = `UPDATE bookings\n      SET seat_number=$1, updated_at=$2\n      WHERE id=$3 AND user_id = $4 returning *`;\n\n      const values = [\n        seatNumber || thisbooking.seat_number,\n        moment(new Date()),\n        req.params.id,\n        req.user.id,\n      ];\n      const response = await db.query(updateOneQuery, values);\n      return res.status(200).send(response.rows[0]);\n    } catch (e) {\n      return res.status(400).send(e);\n    }\n  },\n\n  async delete(req, res) {\n    const deleteQuery = 'DELETE FROM bookings WHERE id=$1 AND user_id = $2 returning *';\n    try {\n      const { rows } = await db.query(deleteQuery, [req.params.id, req.user.id]);\n      if (!rows[0]) {\n        return res.status(404).send({\n          status: 'error',\n          error: 'booking not found',\n        });\n      }\n      return res.status(204).send({\n        status: 'success',\n        error: 'booking successfully deleted',\n      });\n    } catch (e) {\n      return res.status(400).send(e);\n    }\n  },\n};\n\nexport default Booking;\n"],"file":"Booking.js"}